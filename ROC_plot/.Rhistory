var.values$contrib
eig.val
summary(var.values)
eig.val
require(mixOmics)
require(tidyverse)
infile <- '/Users/congliu/prs/nec_rice_analysis/brain_HL/combined_otu_table_m2_std.txt'
map_file <- '/Users/congliu/prs/nec_rice_analysis/brain_HL/map.txt'
outpath <- '/Users/congliu/prs/nec_rice_analysis/brain_HL'
one_group <- c('H', 'L')
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
otu2 <- log(otu + 1)
#otu2 <- otu
otu2$Description <- row.names(otu2)
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
row.names(otu3) <- otu3$Description
otu3 <- subset(otu3, Type %in% one_group) ##挑选出一组样本，提供分组信息
otu4 <- subset(otu3, select = -c(Description, Type))
View(otu)
plsda_result <-plsda(otu4, otu3$Type, ncomp = 2)
plsda_result
plsda_result$names
plsda_result$variates
plsda_result <-plsda(otu4, otu3$Type, ncomp = 4)
plsda_result$variates
plsda_result$explained_variance
summary(plsda_result)
plsda_result
auc(plsda_result)
plotIndiv(plsda_result)
plotVar(plsda_result)
plotLoadings(plsda_result)
plotVar(plsda_result, var.names = F)
auroc(plsda_result)
??plotLoadings
plotLoadings(plsda_result, block = 2)
plotLoadings(plsda_result, block = 1)
plotLoadings(plsda_result, block = 1, size.legend = T)
plotIndiv(plsda_result, ind.names = TRUE, style = 'ggplot2')
summary(otu3$Type)
length(otu3$Type)
dim(otu4)
selectVar(plsda_result, comp = 1)$name
plotVar(plsda_result, var.names = F, cutoff = 0.7)
plotVar(plsda_result, var.names = F, cutoff = 0.1)
plotVar(plsda_result, var.names = F, cutoff = 0.5)
plotVar(plsda_result, var.names = F, cutoff = 0.4)
plotIndiv(plsda_result, ind.names = FALSE, legend = TRUE,
ellipse = TRUE, title = 'PLSDA')
selectVar(plsda_result, comp = 1)$value
length(selectVar(plsda_result, comp = 1)$value)
splsda <- splsda(X=otu4, Y=otu3$Type, ncomp = 2)
selectVar(splsda, comp = 1)$values
selectVar(splsda, comp = 1)$value
plotLoadings(splsda, contrib = 'max', method = 'mean')
splsda <- splsda(X=otu4, Y=otu3$Type, ncomp = 2, keepX=c(100,100))
selectVar(splsda, comp = 1)$value
plotLoadings(splsda, contrib = 'max', method = 'mean')
perf.plsda <- perf(plsda2, validation='Mfold', folds=10,
progressBar=FALSE, nrepeat=50)
plsda2 <- plsda(out4, otu3$Type, ncomp = 2)
set.seed(42)
perf.plsda <- perf(plsda2, validation='Mfold', folds=10,
progressBar=FALSE, nrepeat=50)
plsda2 <- plsda(out4, otu3$Type, ncomp = 2)
plsda2 <- plsda(otu4, otu3$Type, ncomp = 2)
set.seed(42)
perf.plsda <- perf(plsda2, validation='Mfold', folds=10,
progressBar=FALSE, nrepeat=50)
plot(perf.plsda, col = color.mixo(5:6), sd = TRUE, legend.position = 'horizontal')
plot(perf.plsda, col = color.mixo(5:7), sd = TRUE, legend.position = 'horizontal')
# 确定keepX的个数
list.keepX <- c(seq(10,200,10))
list.keepX
plsda2 <- plsda(otu4, otu3$Type, ncomp = 10)
set.seed(42)
# 确定ncomp的个数
perf.plsda <- perf(plsda2, validation='Mfold', folds=10,
progressBar=FALSE, nrepeat=50)
plot(perf.plsda, col = color.mixo(5:7), sd = TRUE, legend.position = 'horizontal')
plot(perf.plsda, col = color.mixo(5:7), sd = TRUE, legend.position = 'best')
# 确定keepX的个数
list.keepX <- c(seq(10,300,20))
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 10, dist = 'max.dist',
progressBar = FALSE,
measure = 'BER',
test.keepX = list.keepX,
nrepeat = 50)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
ncomp
select.keepX <- tune.splsda$choice.keepX[1:ncomp]
select.keepX
plot(tune.splsda, col = color.mixo(5:7))
plot(tune.splsda, col = color.mixo())
plot(tune.splsda, col = color.mixo(ncomp))
plot(tune.splsda, col = color.jet(ncomp))
final.splsda <- splsda(otu4, otu3$Type, ncomp=ncomp, keepX=select.keepX)
plotIndiv(plsda_result, ind.names = FALSE, legend = TRUE,
ellipse = TRUE, title = 'PLSDA')
selectVar(final.splsda, comp = 1)$value
plotLoadings(splsda, contrib = 'max', method = 'mean')
select.var <- selectVar(final.splsda, comp = 1)$value
select.var
class(select.var)
select.keepX
dim(select.var)
perf.plsda
select.keepX
select.var
select.var <- select.var[order(select.var$value.var),]
select.var
arrange(select.var, value.var)
select.var <- selectVar(final.splsda, comp = 1)$value
arrange(select.var, value.var)
select.var <- select.var[sort(select.var$value.var),]
select.var['OTU'] = columns(select.var)
select.var['OTU'] = colnames(select.var)
select.var
select.var <- selectVar(final.splsda, comp = 1)$value
select.var['OTU'] = rownames(select.var)
select.var
select.var <- select.var %>% arrange(value.var)
select.var
plotLoadings(final.splsda, contrib = 'max', method = 'mean')
summary(final.splsda)
final.splsda
final.splsda$X
final.splsda$ncomp
final.splsda$keepX
final.splsda$explained_variance
test_df <- data.frame(x = 10:1)
test_df[order(test_df$x), colnames(test_df), drop = FALSE]
test_df <- data.frame(x = 10:1)
test_df[order(test_df$x), colnames(test_df), drop = FALSE]
test_df <- data.frame(x = 10:1)
test_df
pca(otu4)
hehe <- pca(otu4, ncomp = 2)
plot(hehe)
hehe <- pca(otu4, ncomp = 10)
plot(hehe)
plotIndiv(hehe, group = otu3$Type)
hehe <- pca(otu4, ncomp = 2)
plotIndiv(hehe, group = otu3$Type)
cim(final.splsda)
cim(final.splsda, comp = 1)
require(mixOmics)
require(tidyverse)
infile <- '/Users/congliu/prs/lasso_data/crc2_4_45_46_47_48_49_mv34_qiime_silva_v2_m2_std.txt'
map_file <- '/Users/congliu/prs/lasso_data/map_20200108_add_ref_n_a_c.txt'
outpath <- '/Users/congliu/prs/nec_rice_analysis/brain_HL'
one_group <- c('H', 'L')
one_group <- c('c', 'n')
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, select = -taxonomy)
otu[1:5, 1:5]
otu <- subset(otu, select = -taxonomy)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, select = -(taxonomy %in% c('Unassigned')))
dim(otu)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
dim(otu)
otu <- subset(otu, select = !(taxonomy %in% c('Unassigned')))
dim(otu)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, select = !(otu$taxonomy %in% c('Unassigned')))
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
dim(otu)
otu <- subset(otu, select = !(taxonomy %in% c('Unassigned')))
dim(otu)
otu <- subset(otu, select = -taxonomy)
dim(otu)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- otu %>% filter(taxonomy %in% c('Unassigned'))
dim(otu)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- otu %>% filter(!(taxonomy %in% c('Unassigned')))
dim(otu)
otu
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
otu2 <- log(otu + 1)
#otu2 <- otu
otu2$Description <- row.names(otu2)
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
row.names(otu3) <- otu3$Description
otu3 <- subset(otu3, Type %in% one_group)
otu4 <- subset(otu3, select = -c(Description, Type))
plsda2 <- plsda(otu4, otu3$Type, ncomp = 10)
otu4[1:5, 1:5]
otu3[1:5, 1:5]
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- otu %>% filter(!(taxonomy %in% c('Unassigned')))
otu[1:2, 1:2]
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu[1:2, 1:2]
otu <- subset(otu, taxonomy != 'Unassigned')
dim(otu)
otu[1:2, 1:2]
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
otu2 <- log(otu + 1)
#otu2 <- otu
otu2$Description <- row.names(otu2)
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
row.names(otu3) <- otu3$Description
otu3 <- subset(otu3, Type %in% one_group)
otu4 <- subset(otu3, select = -c(Description, Type))
otu4[1:2, 1:2]
plsda2 <- plsda(otu4, otu3$Type, ncomp = 10)
View(otu4)
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, taxonomy != 'Unassigned')
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
#otu2 <- log(otu + 1)
#otu2 <- otu
otu2$Description <- row.names(otu2)
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
row.names(otu3) <- otu3$Description
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, taxonomy != 'Unassigned')
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
#otu2 <- log(otu + 1)
otu2 <- otu
otu2$Description <- row.names(otu2)
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
row.names(otu3) <- otu3$Description
otu3 <- subset(otu3, Type %in% one_group)
otu4 <- subset(otu3, select = -c(Description, Type))
View(otu4)
head(mapfile)
otu2
otu2[1:2, 1:2]
otu2[1:2, 1:2]
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
otu3[1:2, 1:2]
row.names(otu3) <- otu3$Description
otu3 <- subset(otu3, Type %in% one_group)
otu3[1:2, 1:2]
otu3$Type
dim(otu3)
otu4 <- subset(otu3, select = -c(Description, Type))
dim(otu4)
plsda2 <- plsda(otu4, otu3$Type, ncomp = 10)
set.seed(42)
# 确定ncomp的个数
perf.plsda <- perf(plsda2, validation='Mfold', folds=10,
progressBar=FALSE, nrepeat=50)
plot(perf.plsda, col = color.mixo(5:7), sd = TRUE, legend.position = 'horizontal')
dim(otu4)
# 确定keepX的个数
list.keepX <- c(seq(10,300,20))
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 5, dist = 'max.dist',
progressBar = FALSE,
measure = 'BER',
test.keepX = list.keepX,
nrepeat = 50)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
select.keepX <- tune.splsda$choice.keepX[1:ncomp]
plot(tune.splsda, col = color.jet(ncomp))
ncomp
plot(tune.splsda, col = color.jet(3))
final.splsda <- splsda(otu4, otu3$Type, ncomp=ncomp, keepX=select.keepX)
plotIndiv(plsda_result, ind.names = FALSE, legend = TRUE,
ellipse = TRUE, title = 'PLSDA')
plotIndiv(final.splsda, ind.names = FALSE, legend = TRUE,
ellipse = TRUE, title = 'PLSDA')
select.var <- selectVar(final.splsda, comp = 1)$value
select.var <- select.var[order(select.var$value.var), colnames(select.var), drop=FALSE]
select.var
select.keepX
select.var <- selectVar(final.splsda, comp = 1)$value
select.var <- select.var[order(select.var$value.var), colnames(select.var), drop=FALSE]
# select.var['OTU'] = rownames(select.var)
# select.var <- select.var %>% arrange(value.var)
plotLoadings(final.splsda, contrib = 'max', method = 'mean')
select.var
plotVar(final.splsda, cutoff = 0.5)
# select.var['OTU'] = rownames(select.var)
# select.var <- select.var %>% arrange(value.var)
plotLoadings(final.splsda, contrib = 'max', method = 'mean')
perf.plsda$choice.ncomp
perf.plsda$auc
auroc(perf.plsda, roc.comp = 2)
auroc(plsda2, roc.comp = 2)
error
tune.splsda$choice.keepX[1:5]
select.keepX
plotIndiv(final.splsda, ind.names = FALSE, legend = TRUE,
comp = c(1,2),
ellipse = TRUE, title = 'PLSDA comp 1 & 2')
perf.plsda$error.rate
perf.final <- perf(final.splsda, validation = "Mfold", folds = 5,
dist = 'max.dist', nrepeat = 10,
progressBar = FALSE)
perf.final$error.rate
plot(perf.final, col = color.mixo(5))
plot(perf.final$features$stable[[1]], type = 'h', ylab = 'Stability',
xlab = 'Features', main = 'Comp 1', las =2)
plot(perf.final$features$stable[[2]], type = 'h', ylab = 'Stability',
xlab = 'Features', main = 'Comp 2', las =2)
perf.final$features
perf.final$features$stable
# here we match the selected variables to the stable features
ind.match = match(selectVar(final.splsda, comp = 1)$name,
names(perf.final$features$stable[[1]]))
#extract the frequency of selection of those selected variables
Freq = as.numeric(perf.final$features$stable[[1]][ind.match])
data.frame(selectVar(final.splsda, comp = 1)$value, Freq)
res <- data.frame(selectVar(final.splsda, comp = 1)$value, Freq)
write.table(res, file = '/Users/congliu/prs/plsda_res.txt', sep = '\t')
# select.var['OTU'] = rownames(select.var)
# select.var <- select.var %>% arrange(value.var)
plotLoadings(final.splsda, contrib = 'max', method = 'mean', comp = 1)
# select.var['OTU'] = rownames(select.var)
# select.var <- select.var %>% arrange(value.var)
plotLoadings(final.splsda, contrib = 'max', method = 'mean', comp = 2)
# select.var['OTU'] = rownames(select.var)
# select.var <- select.var %>% arrange(value.var)
plotLoadings(final.splsda, contrib = 'max', method = 'mean', comp = 3)
cim(final.splsda)
res <- data.frame(selectVar(final.splsda, comp = 1)$value, Freq)
write.table(res, file = '/Users/congliu/prs/plsda_res.txt', sep = '\t')
write.table(select.var, file = '/Users/congliu/prs/plsda_var.txt', sep = '\t')
require(mixOmics)
require(tidyverse)
infile <- '/Users/congliu/prs/lasso_data/crc2_4_45_46_47_48_49_mv34_qiime_silva_v2_m2_std.txt'
map_file <- '/Users/congliu/prs/lasso_data/map_20200108_add_ref_n_a_c.txt'
outpath <- '/Users/congliu/prs/nec_rice_analysis/brain_HL'
one_group <- c('c', 'n')
otu <- read.delim(infile, row.names = 1, sep = '\t',
stringsAsFactors = FALSE, check.names = FALSE)
mapfile <- read.delim(map_file, sep = '\t') %>% dplyr::select(Type, Description)
otu <- subset(otu, taxonomy != 'Unassigned')
otu <- subset(otu, select = -taxonomy)
otu <- data.frame(t(otu))
#otu2 <- log(otu + 1)
otu2 <- otu
otu2$Description <- row.names(otu2)
otu3 <- merge(otu2, mapfile, by.x = 'Description', by.y = 'Description')
row.names(otu3) <- otu3$Description
otu3 <- subset(otu3, Type %in% one_group)
otu4 <- subset(otu3, select = -c(Description, Type))
plsda2 <- plsda(otu4, otu3$Type, ncomp = 10)
set.seed(42)
# 确定ncomp的个数
perf.plsda <- perf(plsda2, validation='Mfold', folds=10,
progressBar=FALSE, nrepeat=50)
plot(perf.plsda, col = color.mixo(5:7), sd = TRUE, legend.position = 'horizontal')
perf.plsda$choice.ncomp
perf.plsda$error.rate
# 确定keepX的个数
list.keepX <- c(seq(10,300,20))
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 5, dist = 'max.dist',
progressBar = TRUE,
measure = 'BER',
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, cpus=2)
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 5, dist = 'max.dist',
progressBar = TRUE,
measure = 'BER',
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, cpus=2)
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 5,
progressBar = TRUE,
measure = 'BER',
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, cpus=2)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
select.keepX <- tune.splsda$choice.keepX[1:ncomp]
plot(tune.splsda, col = color.jet(3))
final.splsda <- splsda(otu4, otu3$Type, ncomp=ncomp, keepX=select.keepX)
plotIndiv(final.splsda, ind.names = FALSE, legend = TRUE,
comp = c(1,2),
ellipse = TRUE, title = 'PLSDA comp 1 & 2')
auroc(final.splsda, roc.comp = 2) #仅是补充作用
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
ncomp
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 5,
progressBar = FALSE,
measure = 'BER',
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, cpus=2)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
ncomp
# 确定keepX的个数
list.keepX <- c(seq(10,300,20))
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 5,
progressBar = FALSE,
measure = 'BER',
#dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50, cpus=2)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
ncomp
tune.splsda <- tune.splsda(otu4, otu3$Type, ncomp = 3,
validation = 'Mfold',
folds = 10,
progressBar = FALSE,
measure = 'BER',
dist = 'max.dist',
test.keepX = list.keepX,
nrepeat = 50)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp
ncomp
select.keepX <- tune.splsda$choice.keepX[1:ncomp]
plot(tune.splsda, col = color.jet(3))
final.splsda <- splsda(otu4, otu3$Type, ncomp=ncomp, keepX=select.keepX)
plotIndiv(final.splsda, ind.names = FALSE, legend = TRUE,
comp = c(1,2),
ellipse = TRUE, title = 'PLSDA comp 1 & 2')
auroc(final.splsda, roc.comp = 2) #仅是补充作用
plotVar(final.splsda, cutoff = 0.5)
sample_site <- data.frame(final.splsda$variates)[1:2]
sample_site$names <- rownames(sample_site)
names(sample_site)[1:2] <- c('plsda1', 'plsda2')
sample_site <- merge(sample_site, mapfile, by.x = 'names', by.y = 'Description', all.x = TRUE)
plsda_result_eig <- {final.splsda$explained_variance$X}[1:2]
final_p <- ggplot(sample_site, aes(plsda1, plsda2, color = Type, label = names)) +
geom_point(size = 1.5, alpha = 0.6) +
stat_ellipse(show.legend = FALSE, linetype = 2) +
scale_color_manual(values = c('#1D7ACC', '#F67433', '#00815F','#C673FF2E')) +
scale_shape_manual(values = c(16, 17)) +
theme(panel.grid = element_line(color = 'grey50'),
panel.background = element_rect(color = 'black', fill = 'transparent')) +
theme(legend.title = element_blank(), legend.key = element_rect(fill = 'transparent')) +
labs(x = paste('PLS-DA axis1 ( explained variance ', round(100 * plsda_result_eig[1], 2), '% )', sep = ''),
y = paste('PLS-DA axis2 ( explained variance ', round(100 * plsda_result_eig[2], 2), '% )', sep = ''))
final_p
library(pROC)
library(ggplot2)
setwd("/Users/congliu/prs_R/ROC_plot")
data <- read.table(file = "ROC_plot_input.txt", header = T, sep = "\t", row.names = 1)
head(data)
data <- read.table(file = "ROC_plot_input.txt", header = T, sep = "\t", row.names = 1)
head(data)
data <- read.table(file = "ROC_plot_input.txt", header = T, sep = "\t", row.names = 1)
head(data)
#colnames(data)[2]
rocobj1 <- roc(data[,1], data[,2])
auc(rocobj1)
plot(rocobj1, print.auc=TRUE, auc.polygon=TRUE, partial.auc=c(1, 0.8),
partial.auc.focus="sp", grid=c(0.1, 0.2), grid.col=c("green", "red"),
max.auc.polygon=TRUE, auc.polygon.col="skyblue", print.thres=TRUE)
mycoords <- coords(rocobj1, "all")
plot(mycoords["threshold",], mycoords["specificity",], type="l",
col="red", xlab="Cutoff", ylab="Performance")
lines(mycoords["threshold",], mycoords["sensitivity",], type="l",
col="blue")
plot(mycoords["threshold",], mycoords["specificity",], type="l",
col="red", xlab="Cutoff", ylab="Performance")
